// THIS FILE WAS GENERATED BY `xtp-cpp-bindgen`. DO NOT EDIT.
#define EXTISM_CPP_IMPLEMENTATION
#include "pdk.gen.hpp"
#include <extism-pdk.hpp>
#include <jsoncons/json.hpp>
#include <magic_enum.hpp>

JSONCONS_ALL_MEMBER_TRAITS(pdk::IncomingEmail, headers, body, receiver, sender)
JSONCONS_ALL_MEMBER_TRAITS(pdk::ReplyEmail, body, subject)

namespace pdk {

namespace exports {

int32_t EXTISM_EXPORTED_FUNCTION(onEmail) {
  extism::log_debug("onEmail: getting JSON input");
  auto input_str = extism::input().string();
  if (!input_str.size()) {
    extism::error_set("0 length input cannot be json");
    return -1;
  }
  auto input = jsoncons::decode_json<IncomingEmail>(std::move(input_str));
  extism::log_debug("onEmail: calling implementation function");
  auto result = impl::onEmail(std::move(input));
  if (!result) {
    extism::error_set("onEmail: failed");
    return -3;
  }
  extism::log_debug("onEmail: setting JSON output");
  std::string output;
  jsoncons::encode_json(*result, output);
  if (!extism::output<char>(output)) {
    extism::error_set("outputting failed");
    return -5;
  }
  extism::log_debug("onEmail: returning");
  return 0;
}

} // namespace exports

namespace imports {

EXTISM_IMPORT_USER("deliver")
extern extism::imports::RawHandle deliver(extism::imports::RawHandle);

EXTISM_IMPORT_USER("reply")
extern extism::imports::RawHandle reply(extism::imports::RawHandle);

} // namespace imports

std::expected<int32_t, Error> deliver(const IncomingEmail &input) {
  std::string encoded;
  jsoncons::encode_json(input, encoded);
  auto in_handle = extism::UniqueHandle<char>::from(encoded);
  if (!in_handle) {
    return std::unexpected(Error::extism);
  }
  auto out_raw = imports::deliver(*in_handle);
  if (!out_raw) {
    return std::unexpected(Error::host_null);
  }
  extism::UniqueHandle<char> out_handle(out_raw);
  auto out_string = out_handle.string();
  if (!out_string.size()) {
    return std::unexpected(Error::not_json);
  }
  return jsoncons::decode_json<int32_t>(std::move(out_string));
}

std::expected<int32_t, Error> reply(const ReplyEmail &input) {
  std::string encoded;
  jsoncons::encode_json(input, encoded);
  auto in_handle = extism::UniqueHandle<char>::from(encoded);
  if (!in_handle) {
    return std::unexpected(Error::extism);
  }
  auto out_raw = imports::reply(*in_handle);
  if (!out_raw) {
    return std::unexpected(Error::host_null);
  }
  extism::UniqueHandle<char> out_handle(out_raw);
  auto out_string = out_handle.string();
  if (!out_string.size()) {
    return std::unexpected(Error::not_json);
  }
  return jsoncons::decode_json<int32_t>(std::move(out_string));
}

} // namespace pdk
